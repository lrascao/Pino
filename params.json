{"name":"Pino","body":"# Pino\r\n\r\n## Python template preprocessor\r\n\r\nPino is a template preprocessor that is designed to integrate easily with C-like languages(such as C, C++, C#, and Java). To process a file called \"myfile.pino\" just call:\r\n```\r\npino.py myfile.pino\r\n```\r\n\r\n## Getting Started\r\n\r\nThe dollar sign($) is used to signal the preprocessor. There are two types of \r\nsyntaxes, expressions and blocks. A python expression is evaluated by calling:\r\n```Javascript\r\n$(\"hello\")\r\n```\r\nBlocks allow flow control, such as:\r\n```Javascript\r\n$if i is 5\r\n{\r\n    hello\r\n}\r\n```\r\nHere is an example that creates a class that has 5 variables:\r\n```Javascript\r\nclass foo\r\n{\r\n    $for i in range(5)\r\n    {\r\n        int x$(i);\r\n    }\r\n};\r\n```\r\nThis will output:\r\n```Javascript\r\nclass foo\r\n{\r\n        int x0;\r\n        int x1;\r\n        int x2;\r\n        int x3;\r\n        int x4;\r\n};\r\n```\r\n\r\n# How it works\r\n\r\n## Overview\r\n\r\nPino evaluates python expressions in your source code. Thus, when it finds `$()`, \r\nit will evaluate whats inside of the parenthesis, and output that to the file. \r\nFor example, if you type `$(\"hello\")` it will output `hello` without the quotes to\r\nthe file. If you want to output `\"hello\"` with quotes you can type \r\n`$(quote(\"hello\"))`.\r\nNow to process the file just add \".pino\" extension to your file. Pino will \r\nprocess the file, and output to the same file name with the extension removed.\r\nSo a file named \"foo.cpp.pino\" will be processed and outputted to \"foo.cpp\".\r\n\r\n## Flow control\r\n\r\nFlow control can be done using \"if\" and \"for\" statements\". Here is the syntax \r\nfor an if statement:\r\n```Javascript\r\n$if conditional { output }\r\n```\r\nIf the conditional is true then whatever is in the curly braces will be \r\noutputted. If it is not true, then nothing will be outputted. The conditional is\r\na python expression. Right now, else clauses are not supported. \r\nHere is the syntax for the for statement:\r\n```Javascript\r\n$for python-for { output }\r\n```\r\nEvery time the for loop is run, it will output what's in the curly braces. The for\r\nloop is evaluated from a python for loop.\r\n\r\n## Multiple Files\r\n\r\nIf you are wanting to process several files in a data driven way, then you can pass a python file(rather than a \".pino\" file) where you can define variables and functions that are available in the template file. Then in the python file, just define an list called templates that contains a tuple with the template file to be processed and the name of the output file:\r\n```Python\r\ntemplates = [(\"MyTemplateHeader.h\", \"MyHeader.h\"), (\"MyTemplateSrc.cpp\", \"MySrc.cpp\")]\r\n```\r\nThis will process each file in the templates list, and any variables defined in this file will be accessible during processing.  So, for example, if you wrote a \"template.py\" file define like this:\r\n```Python\r\ntemplates = [(\"MyTemplate.h\", \"MyHeader.h\")]\r\nclass_name = \"foo\"\r\nnumber_of_vars = 5\r\n```\r\nThen if the \"MyTemplate.h\" file was defined like this:\r\n```Javascript\r\nclass $(class_name)\r\n{\r\n    $for i in range(number_of_vars)\r\n    {\r\n        int x$(i);\r\n    }\r\n};\r\n```\r\nCall pino on the file like this:\r\n```\r\npino.py template.py\r\n```\r\nThen pino will generate a file called \"MyHeader.h\" with this output:\r\n```Javascript\r\nclass foo\r\n{\r\n        int x0;\r\n        int x1;\r\n        int x2;\r\n        int x3;\r\n        int x4;\r\n};\r\n```\r\n\r\n","tagline":"Python template preprocessor","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}